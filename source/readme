
                              Manual of Myshell

********************************************************************************

1. Welcoming

    Welcome to myshell powered by Zhifeng Jiang!
    What can be expected to see in the following part of the manual including :

    | Chapter |  Title                    |   Line   |
    |---------|---------------------------|----------|
    |    2    |  What is myshell          |   27     |
    |    3    |  Environment of myshell   |   43     |
    |    4    |  File system              |   61     |
    |    5    |  Redirection of I/O       |   94     |
    |    6    |  Pipes                    |   144    |
    |    7    |  Process                  |   165    |
    |    8    |  Background commands      |   183    |
    |    9    |  Supported commands       |   198    |
    |    10   |  Acknowledgement          |   747    |

<-- Tips : Make sure that the width of a line in your editor is at least 80. -->

********************************************************************************

2. What is Myshell

    Shell is a sort of command parsing program, which is the basic interface of
the operating system. Every version of released Linux includes lots of kinds of
shell. The most popular among them comprises bash, TC shell and Korn shell.

    All shells are stored in the directory /bin/. Programmer can choose which to
run when log in the Linux system.

    Myshell, which imitates the behaviours of bash shell, is another kind of 
shell that is developed in the purpose of studying operating system.

    However, all the codes of myshell is authentic.

********************************************************************************

3. Environment of myshell
    
    The environment where this shell was developed is Ubuntu 64-bit 17.04.

    The source codes, including *.c, *.h, make and a copy of readme, is right in
the directory named "myshell". Using that directory as the current working 
directory, you can make the project by simply typing "make" in the terminal.

    If you want to use help command in myshell, make sure that the directory 
name "doc" is in the same directory as directory "myshell" is in.

    It is advisable that adding the path of directory "myshell" into the value 
of PATH environment variable so that you can use myshell with more convenience.

    In myshell, the PATH will be changed into "/bin:/usr/bin:./".

********************************************************************************

4. File system

    Linux takes almost everything as file. Let see some types of files in Linux:

        |  type                |  description                        |
        |----------------------|-------------------------------------|
        |  common file         |  text, photo, executive file etc    |
        |  directory           |  sub-directories and files included |
        |  symbolic file       |  points to another file             |
        |  device file         |  character and block device         |
        |  pipe file           |  for sake of process communication  |

    Structure of file system in linux is like a tree, with some great branches
like :

        |  path       |  description                                 |
        |-------------|----------------------------------------------|
        |  /          |  root, which means all files included        |
        |  /bin       |  important executive files                   |
        |  /dev       |  device catalog                              |
        |  /etc       |  configuration files about hosts             |
        |  /lib       |  libraries of program languages              |
        |  /home      |  the home directory of user                  |
        |  /usr       |  system commands and applications            |
        |  ...        |  /boot, /mnt, /opt, /proc, /tmp and so on    |

    Home directory is the very directory a user meets when he / she has just 
logged in the system.

    Current working directory is the directory a user is in at the moment.

********************************************************************************

5. Redirection of I/O

    Usually, user type in the shell and wait for the response on the screen.

    Sometimes some information will also be printed on the screen when something
go wrong.

    In fact, in Linux, the three I/O methods mentioned above are called standard
I/O. 

    To be exact, input from keyboard is called standard input, output on the
screen is called standard output. The third kind of standard I/O is called 
standard error, which also takes place on the screen, but with no buffering.

    In Linux file system, I/O devices are all regarded as files. 

    Each file has its file descriptor, and the descriptor of stdin, stdout and 
stderr ( short for standard input, standard output and standard error 
respectively ) are 0, 1 and 2 respectively.

    Hence the file descriptor somewhat means the I/O direction.

    If a program reads from the keyboard and output the result on the screen,
obviously the input fd ( short for file descriptor ) is 0, and its output fd is
1.

    If you want to use other kinds of I/O methods, e.g. read from a file or
write to the printer, then you must redirection the I/O stream using I/O
redirection.

    Instead to remind yourselves of fds of files, in myshell, you can use " < 
[filename] " to redirect the input from an existing file with the filename 
designated.

    For example, you can use command " wc < a.txt " to read the content in a.txt
and count how many lines it has.

    Similarly, you can use " > [filename] " to redirect the output to a file
with the filename designated. Note that the content will be totally covered in
the file if the file has already existed, otherwise it be created before it 
works.

    If you just want to append the output to a file, you can use command " >>
 [filename] " instead.

    There may be other ways to do the I/O redirection, but those are all what
are supported by myshell.

********************************************************************************

6. Pipes

    Pipe is one of the media to implement communications between two process.

    The feature of pipe is FIFO ( short for first in first out ).

    Pipe consists of two categories, one is called pipe, the other is called
FIFO.

    We only discuss the former one.

    A pipe is just like an opened file, two processes can read and write from
the files to fulfill the goal of communication.

    In myshell, you can use symbol '|' between two commands to create a pipe.

    For example, you can input command " ls | more " to make the output of 
command "ls" as the input of command "more".

********************************************************************************

7. Process

    A process is a running program. 

    Linux system allow users to have processes running concurrently.

    Process can run in two places.

    Foreground, the most comman place to run a process.

    When user executes a command in terminal, a foreground process is then 
created.

    Background, where some commands can run in when terminal can go on running 
other process.

********************************************************************************

8. Background commands

    In myshell, you can execute the internal commands ( in terms of the internal
command that myshell supports, you can refer to the next chapter ) except fg,
bg, jobs, umask, cd, shift, exit, exec, set, unset and = in background mode.

    Also you can run the external commands in background.

    To begin a process in background mode you should append a '&' at the end of
the command.

    For example, " sleep 100 & ".

********************************************************************************

9. Supported commands

    In this shell, all following commands will be interpreted as internal ones:
	
    1.  quit     2.  echo     3.  pwd      4.  time
    5.  umask    6.  clr      7.  dir      8.  environ
    9.  help     10. cd       11. jobs     12. bg
    13. fg       14. exec     15. exit     16. set
    17. unset    18. shift    19. test     20. = (simple assignment)
    21. if       22. while    23. continue 24. + (simple addition)
	
    In addition, ctrl + z is supported to stop a fore ground command.

    Other commands will be regarded as external ones, being executed by using 
execvp funtion.

    Following are description in detail.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

quit:
    Quit myshell.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

echo:
    
    echo  [arguments ... ]

    Write the arguments to the standard output with a newline appended.

    For example, "echo I love Linux", then you can see "I love Linux" on the 
screen with a newline.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " echo I love Linux | wc -w ", " echo I Love Linux > a.txt ", 
" echo I Love Linux >> b.txt " are all supported.

    Locational variables, local shell variables and environment variables are 
also supported.

    For example, you can use $0, $1, ..., $9, $$, $@, $#, $?, $!, $*, $a 
(assume that it is one of the local shell variables), $HOME ...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

pwd:

    pwd

    Write the path of the current working directory to the standard output with 
a newline appended.

    If the path includes the home directory, the whole path of the home 
directory will be replaced by a symbol '~'.

    For example, if you are now in the directory "/home/ji/myshell/", and your 
home directory is "/home/ji/", then you will otain "~/myshell" if you execute 
the command.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " pwd | wc -c ", " pwd > a.txt " , " pwd >> b.txt " are all 
supported.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

time:

    time

    Write the current time to the standard output.

    The format is like "yyyy-mm-dd weekday hh:mm:ss".

    For example, you can obtain a time like "2017-07-30 Sunday 21:59:56".

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " time | wc -w ", " time > a.txt ", " time >> b.txt " are all 
supported.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

umask:

    umask [mask]

    Displaying the file mode creation mask (umask) , or setting the umask to 
[mask] & 0777.

    For example, " umask " can result in a umask like "0022" on your screen.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " umask | wc -w ", " umask > a.txt ", " umask >> b.txt " are 
all supported.

    If an octal mask is appended, then the umask will be changed into that umask
 bitwised-and by 0777, where no output at all.

    For example, " umask 0666 " will change the umask in myshell into 0666.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

clr:

    clr

    Clear the terminal screen. 

    Unlike "clear" in the Linux terminal, "clr" will result in a totally clean 
terminal, which means all previous results in the terminal will be totally swept
 away and cannot be fetched by rolling the screen any more.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

dir:

    dir [directory]

    Write the list of all the directories and files in the designated directory 
to the standard output with a newline appended.

    If the path includes the home directory, the whole path of the home 
directory will can be replaced by a symbol '~'.

    For example, you may get a list by " dir ~/myC/doc " like this:

        general.txt        dir.txt       time.txt
                  .            clr        pwd.txt
          umask.txt       quit.txt       echo.txt
         readme.txt             ..        clr.txt

    If there is not a path designated, i.e. just " dir ", then the content of 
the current working directory will be obtained.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " dir | wc -w ", " dir > a.txt ", " pwd >> b.txt " are all 
supported.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

environ:

    environ

    Write all the environment variables to the standard output with a newline 
appended.

    The format is like :

        name1=value1
        name2=value2
        ...

    For example, you can obtain a list by typing " environ " like this:

        ...
        PWD=/home/samuelgong/myC/doc
        HOME=/home/samuelgong
        ...

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

help:

    help [command]

    Write the helping manual to the standard output.

    For example, you can obtain the manual of " echo " by " help echo ".

    Only the commands myshell implemented have a manual.

    If there is no command designated, then a general manual will be shown.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " help time | more ", " help environ > a.txt ", " help bg >> 
b.txt " are all supported.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

cd:

    cd [directory]

    Change the current directory to the designated directory. If no directory 
is designated, then the default directory is the home directory.

    If the path includes the home directory, the whole path of the home 
directory will can be replaced by a symbol '~'.    

    For example, you may use " cd ~/myshell " to change the current working 
directory from some place like " /etc " to " ~/myshell "

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

jobs:

    jobs

    Write all the background jobs to the standard output with a newline 
appended. The format is like :

    [num]( /-/+)    status    <all the arguments of the commands>

    '+' marks the default job. '-' marks the next default one. That is to say, 
if you use bg or fg command while no argument is appended, then the job with '+'
 will be the object of the command.

    For example, you can obtain a job list using " jobs " like this:

         [1]     running		sleep 100 &
         [2]-    running		sleep 300 &
         [3]+    stopped		sleep 200

    If there are not any background commands, then nothing will be displayed.

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " jobs | wc -w ", " jobs > a.txt ", " jobs >> b.txt " are all 
supported.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

bg:

    bg [num]

    Run the selected job which stopped in the background, in the background.

    For example, given the job list below ( obtained by " jobs "), you can run 
the job " sleep 100 " in the background by " bg 1".

         [1]     stopped		sleep 100
         [2]-    running		sleep 300 &
         [3]+    stopped		sleep 200

    If no job is designated, then the one with '+' will be the object.

    For example, you can run the job " sleep 200 " in the background by the 
command " bg ".

    If there are no background jobs at all, then it will do nothing.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

fg:

    fg [num]

    Run the selected job in the foreground. The job should be background one 
before execute the command.

    For example, given the job list below ( obtained by " jobs "), you can run 
the job " sleep 300 " in the foreground by " fg 2".

         [1]     stopped		sleep 100
         [2]-    running		sleep 300 &
         [3]+    stopped		sleep 200

    If no job is designated, then the one with '+' will be the object.

    For example, you can run the job " sleep 200 " in the foreground by the 
command " fg ".

    If there are no background jobs at all, then it will do nothing.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

exec:

    exec [command]

    Replace the shell with the given command. Hence, the myshell will exit.

    The command will be executed by function execvp, that is to say, will be 
exectued by the routines beyond myshell. So all the commands can be executed as 
long as your Linux system supports.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

exit:

    exit [code]

    Cause normal process termination with a code ranged from 0 to 126. If there 
is not exit code designated, then 0 will the default code.

    For example, you can use " exit 100 " to exit myshell with code 100. You can
 just use " exit " to exit myshell with code 0.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

set:

    set [arguments]

    If no arguments are designated, this command will result in a display of the
 list of all the local shell variables.

    The format is like :

    ...
    a=A
    b=C
    ...

    If output is redirected, then the procedure will write the result into the 
designated destination. 

    For example, " set | wc -l ", " set > a.txt ", " set >> b.txt " are all 
supported.

    If there are arguments, then they will be assigned to the positional 
variables from $1 to $9.

    For example, you can set $1 and $2 to be "Love" and "Linux" respectively 
by the command " set Love Linux ".

    Locational variables, local shell variables and environment variables are 
also supported.

    For example, you can use " set $HOME " to set the $1 to be the value of the 
environment variable named HOME.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

unset:

    unset [variable]

    Remove the local shell variable with name designated.

    For example, if you have a variable name a whose value is 1, the command " 
unset a " will remove that variable totally.

    If no variable is designated, then it will do nothing.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

shift:

    shift [amount]

    Shift the locational variables left with the amound designated.

    For example, before executing the command " shift 3 ", all the locational 
variables were:

        $0 = ./myshell  $1 = I      $2 = Love      $3 = Linux      $4 = !

    Then after executing that command, the locational variables will be:

        $0 = Linux      $1 = !

    If no amount is designated, then the default is 1.

    For example, the former locational variables distribution will be changed 
into the following state after executing the command " shift ":

        $0 = I          $1 = Love   $2 = Linux     $4 = !

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

test:

    test [expression]

    Evalute the conditional expression. Exit with code 0 if that expression is 
true, and 1 otherwise.

    1. For string expression:
    
        -z STRING                 True if string is empty.
    
        -n STRING                 True if string is not empty.
    
        STRING1 = STRING2         True if the strings are equal.

        STRING1 != STRING2        True if the strings are not equal.

    2. For integer expression:

        INT1 -eq INT2           True if the integers are equal.

        INT1 -ne INT2           True if the integers are not equal.

       	INT1 -gt INT2           True if the former is greater than the latter.

        INT1 -ge INT2           True if the former is greater than or equal to 
the latter.

        INT1 -lt INT2           True if the former is less than the latter.

        INT1 -le INT2           True if the former is greater than or equal to 
the latter.

    In all the above expression, locational variables, local shell variables and
 environment variables are also supported.

    For example, you can use $0, $1, ..., $9, $$, $@, $#, $?, $!, $*, $a (assume
 that it is one of the local shell variables), $HOME ...

    3. For file test:

      -d FILE                   True if file is a directory.

      -e FILE                   True if file exists.

      -f FILE                   True if file exists and is a regular file.

      -g FILE                   True if file is set-group-id.

      -r FILE                   True if file is readable by you.

      -s FILE                   True if file exists and is not empty.

      -u FILE                   True if the file is set-user-id.

      -w FILE                   True if the file is writable by you.

      -x FILE                   True if the file is executable by you.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

=:

    <variable>=<value>

    Assign the value to the existing local shell variable, or create one if it 
doesn't exist before.

    Note that there must not be any space at the ends of the character '='.

    For example , "a=1" can assign 1 to a.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

if:

    if test [expression]
    then
        [A commands]
    fi
    [B commands]

    Execute the command according to condition.

    If the exit status of expression is true (0), then [A commands] will be 
executed before [B commands] being executed, otherwise [A commands] will be 
skipped.

    For example, if you have such statements in your batch file:

    ...
    $i=0
    if test $i -eq 0
    then
        $i=100
    fi
    $i=i+1

    After executing this segments of codes, you will have $i = 101.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

while:

    while test [expression]
    do
        [A commands]
    done
    [B commands]

    Executing A commands as long as the test result of expression is true (0), 
otherwise B commands will be executed sequentially.

    For example, if you have such statements in your batch file:

    ...
    i=0
    while test $i -lt 3
    do
        i=$i+1
    done
    echo $i

    Then you will obtain "3" on the screen after executing that segment of
codes.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

continue:

    continue

    Continue the while loop, which begins with the test commands.

    For example, if you have such statements in your batch file:

    ...
    i=0
    set I do not love Linux
    while test i -lt 5
    do
        if test i -eq 2
        then
            continue
        fi
        echo $1
        shift
    done

    Then you will obtain "I" "do" "love" "Linux" on the screen, where each word 
is occupying a line, but "not" will not appear since the continue command works.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

+:

    <variable>=<variable/value>+<variable/value>

    Do the simple addition in the assignment statement.

    For example, you will get $i = 1 after executing the following commands:

    i=0
    i=$i+1

    Locational variables, local shell variables and environment variables are 
also supported.

    For example, you can use $0, $1, ..., $9, $$, $@, $#, $?, $!, $*, $a (assume
 that it is one of the local shell variables), $HOME ...

********************************************************************************

10. Acknowledgement

    Thanks for my families and Instructor Ji for their supports for me and 
myshell.

                        Zhifeng Jiang 2017-08-01

